<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
		">
	<munit:config name="fakestore-product-prc-api-impl-suite.xml" />
	<munit:test name="getAllProducts-implFlow-success" doc:id="f4e06586-8706-416c-8522-5240a69f20a3" tags="http">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Fakestore Product API Proxy" doc:id="0467e78b-33e0-4b48-8925-61605dd2b325" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="77210df8-0aed-42b7-bad7-6ef7443f772c" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getAllProductsimplFlowsuccess\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getAllProductsimplFlowsuccess\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getAllProductsimplFlowsuccess\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="2fa012ed-1702-40a4-97f6-ba1c20d65913">
				<munit:payload value="#[readUrl('classpath://getAllProductsimplFlowsuccess\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getAllProductsimplFlowsuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getAllProductsimplFlowsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to getAllProducts-implFlow" doc:id="75890039-7b5b-43f8-b53d-e770b22744dd" name="getAllProducts-implFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="2ccfde2e-7834-47f5-9d18-f875268e256c" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getAllProductsimplFlowsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	
	<munit:test name="getProductByID-implFlow-success" doc:id="21b8f83b-f61a-4992-a183-b33cb20f15a1" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Fakestore Product API Proxy" doc:id="10be13c3-25c2-4b09-9812-103cda492b7b" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="9bb769c7-1bf4-42f7-a8d2-a0afdf1aa3cf" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getProductByIDimplFlowsuccess\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getProductByIDimplFlowsuccess\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getProductByIDimplFlowsuccess\mock_variable_.dwl')]" />
						<munit-tools:variable key="productId" value="#[output application/java --- readUrl('classpath://getProductByIDimplFlowsuccess\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="d3370b7c-a5e0-455f-8109-8b999e8cdfcc">
				<munit:payload value="#[readUrl('classpath://getProductByIDimplFlowsuccess\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getProductByIDimplFlowsuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getProductByIDimplFlowsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to getProductByID-implFlow" doc:id="bc826777-8d84-4c2b-8de6-13e3f0dd270c" name="getProductByID-implFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="61d0f1ce-1319-45c2-97e6-22c70e527d17" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getProductByIDimplFlowsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Retrieved product from Fakestore API" doc:id="2640a0be-667c-4f1b-b276-661c36dc4812" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="26c14a08-11f8-4be3-b881-bed324eb7280" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="getProductByID-implFlow-productNotFound" doc:id="a941e5b1-8b3b-4c51-a278-2c9e4c32d56f" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Fakestore Product API Proxy" doc:id="9e6749a9-1985-4ff4-b10b-10d0d6e95003" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="9bb769c7-1bf4-42f7-a8d2-a0afdf1aa3cf" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getProductByIDimplFlowproductNotFound\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getProductByIDimplFlowproductNotFound\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getProductByIDimplFlowproductNotFound\mock_variable_.dwl')]" />
						<munit-tools:variable key="productId" value="#[output application/java --- readUrl('classpath://getProductByIDimplFlowproductNotFound\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="f847e49e-ea2c-4be5-9006-e60464bd2513">
				<munit:payload value="#[readUrl('classpath://getProductByIDimplFlowproductNotFound\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getProductByIDimplFlowproductNotFound\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getProductByIDimplFlowproductNotFound\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to getProductByID-implFlow" doc:id="d95b486c-380b-4e70-b30d-85a6bf65e6e5" name="getProductByID-implFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c21ad8dd-9adc-4590-b2d8-378b7531c02d" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getProductByIDimplFlowproductNotFound::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="getTop10Products-implFlow-success" doc:id="87785e3c-446a-4282-9368-1636f111e419" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Fakestore Product API Proxy" doc:id="0b76c5c1-f7ba-4f6f-9566-f9af22ba2a53" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="9c9bc601-bd6c-4af6-9697-23aa86ba433b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getTop10ProductsimplFlowsuccess\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getTop10ProductsimplFlowsuccess\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getTop10ProductsimplFlowsuccess\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="21fdef16-feb4-4d64-b09f-3dcc246c8202">
				<munit:payload value="#[output application/json --- readUrl('classpath://getTop10ProductsimplFlowsuccess\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://getTop10ProductsimplFlowsuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getTop10ProductsimplFlowsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to getTop10Products-implFlow" doc:id="afb95289-f779-4fa3-b6fd-1f422a0058e6" name="getTop10Products-implFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="d35ddcfb-bf38-47a2-aaaf-8e09b2260815" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getTop10ProductsimplFlowsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="createNewProduct-implFlow-success" doc:id="b0471417-59a3-4b33-8b41-c2c4be159c87" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Fakestore Product API Proxy" doc:id="e90dc0eb-8e1a-4f74-aaab-3ea77d8a0eb3" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="5049d055-b155-448f-bdad-59b80822195c" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://createNewProductimplFlowsuccess\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://createNewProductimplFlowsuccess\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://createNewProductimplFlowsuccess\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="ca78925d-18d6-465d-ae0b-19e877787d01">
				<munit:payload value="#[output application/json --- readUrl('classpath://createNewProductimplFlowsuccess\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://createNewProductimplFlowsuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://createNewProductimplFlowsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to createNewProduct-implFlow" doc:id="2973feb2-123e-4fce-8976-f966486299d6" name="createNewProduct-implFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="a56bc9b2-eed7-4a6c-b099-f32b7d723892" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import createNewProductimplFlowsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="updateProduct-implFlow-success" doc:id="f2b2157e-930e-4fb2-b908-4d71104689f2" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Fakestore Product API Proxy" doc:id="8a97dc7a-3358-4ca9-aef1-427a2c9558ec" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="759a1a69-57fd-4f1e-b0d1-f930d15de58e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://updateProductimplFlowsuccess\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://updateProductimplFlowsuccess\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://updateProductimplFlowsuccess\mock_variable_.dwl')]" />
						<munit-tools:variable key="productId" value="#[output application/java --- readUrl('classpath://updateProductimplFlowsuccess\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="387184ea-ca61-43d5-abb8-4d522671cd3f">
				<munit:payload value="#[output application/json --- readUrl('classpath://updateProductimplFlowsuccess\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://updateProductimplFlowsuccess\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://updateProductimplFlowsuccess\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to updateProduct-implFlow" doc:id="3c1faf0e-1737-4813-9809-7c0eb5aa5eec" name="updateProduct-implFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="0e297cee-d202-4a55-99cc-7545ba3c3e43" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import updateProductimplFlowsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="fakestore-product-prc-api-impl-triggerBadRequestSuccess" doc:id="94b63948-5488-49f3-904d-846e961ed9d6" expectedErrorType="APIKIT:BAD_REQUEST">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when APIKIT:BAD_REQUEST" doc:id="f13f6188-fd3f-4d28-b0f6-73108d7bb518" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-product-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:BAD_REQUEST" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow Reference to fakestore-product-papi-main" doc:id="d3e9d763-556d-4c05-815a-f43837929d2d" name="fakestore-product-papi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="b97a057d-b955-44ed-ab3f-97c7ae3bc285" actual="#[vars.httpStatus]" expected="#[400]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="fakestore-product-prc-api-impl-triggerNotFoundSuccess" doc:id="7351a877-5381-4e88-9670-4753ef745018" expectedErrorType="APIKIT:NOT_FOUND">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:BAD_REQUEST" doc:id="11982052-70ae-4bcc-b4dd-e8f09189d4d9" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-product-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_FOUND" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-product-papi-main" doc:id="1de5dcf4-fb49-41c6-809c-2cbeab0e63e4" name="fakestore-product-papi-main" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="6c8abc61-67e8-4cf1-9b2b-c1a2dc75c3e6" actual="#[vars.httpStatus]" expected="#[404]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-product-prc-api-impl-triggerNotAcceptableSuccess" doc:id="8b397808-a268-42b2-bda4-be888cd5520f" expectedErrorType="APIKIT:NOT_ACCEPTABLE">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:NOT_ACCEPTABLE" doc:id="682ee8dc-27d3-4288-bf0b-1113819ef28f" processor="apikit:router">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="fakestore-product-papi-config" attributeName="config-ref" />
					</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_ACCEPTABLE" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-product-papi-main" doc:id="ed67f839-8c3f-4934-a295-6747e019ec4a" name="fakestore-product-papi-main" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="ca2f10e3-585b-44de-810c-219bbc1fccef" actual="#[vars.httpStatus]" expected="#[406]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-product-prc-api-impl-triggerUnsupportedMediaTypeSuccess" doc:id="1fbdefdc-1684-48a5-b2f5-eaae36a667d7" expectedErrorType="APIKIT:UNSUPPORTED_MEDIA_TYPE">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:UNSUPPORTED_MEDIA_TYPE" doc:id="f47aec47-378e-4ad4-82f5-6fc2ad577538" processor="apikit:router">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="fakestore-product-papi-config" attributeName="config-ref" />
					</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:UNSUPPORTED_MEDIA_TYPE" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-product-papi-main" doc:id="e14d7a86-8209-48e3-876b-b72ec2d4de9e" name="fakestore-product-papi-main" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="8ed9d23d-0897-4a36-b61c-300df411a3f5" actual="#[vars.httpStatus]" expected="#[415]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-product-prc-api-impl-triggerNotImplementedSuccess" doc:id="a5439716-d91f-464f-a1a0-257e6bf515f7" expectedErrorType="APIKIT:NOT_IMPLEMENTED">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:NOT_IMPLEMENTED" doc:id="ea13aa04-e560-4c38-8f47-238129cff6bf" processor="apikit:router">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="fakestore-product-papi-config" attributeName="config-ref" />
					</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_IMPLEMENTED" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-product-papi-main" doc:id="efd2bea1-d601-4251-a682-010dc5b9aa36" name="fakestore-product-papi-main" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="90760bdc-2efc-42cd-a8b9-fe8879481a3b" actual="#[vars.httpStatus]" expected="#[501]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-product-prc-api-impl-triggerHttpTimeoutSuccess" doc:id="1f923c38-3e0e-4df1-9496-5f62df8114f9" expectedErrorType="HTTP:TIMEOUT">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when HTTP:TIMEOUT" doc:id="f24820e0-6c08-4c5e-889a-cd513338b9b5" processor="http:request">
					<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="77210df8-0aed-42b7-bad7-6ef7443f772c" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="fakestore-proxy-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:TIMEOUT" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to getAllProducts" doc:id="5ce1306d-b991-4cb8-89c2-660dcd69e7d7" name="getAllProducts-implFlow" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="a5eae95f-6e0c-4e31-88ee-fb616dee0fe3" actual="#[vars.httpStatus]" expected="#[500]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-product-prc-api-impl-triggerNotFoundinConsoleSuccess" doc:id="e376416a-1d55-42bf-9537-a67531a4406e" expectedErrorType="APIKIT:NOT_FOUND">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:NOT_FOUND" doc:id="c5ec85f9-f469-410a-8b2f-bc35fdbda0ac" processor="apikit:console">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-product-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_FOUND" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-product-papi-console" doc:id="8e7e764b-988b-4b66-a502-05cc40fa3174" name="fakestore-product-papi-console" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="10d10f24-2df3-416f-aa2d-d01303eca691" actual="#[vars.httpStatus]" expected="#[404]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-product-prc-api-impl-triggerAnyErrorSuccess" doc:id="00b2811d-c612-4b18-9d26-f8639e0cc729" expectedErrorType="ANY">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when ANY" doc:id="9b15ebb3-da04-4962-945d-10645ec8d2d0" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-proxy-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to getAllProducts-implFlow" doc:id="2f3165aa-b9d1-4eaf-a368-d3ec876ed366" name="getAllProducts-implFlow" />
			</munit:execution>
			<munit:validation>
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="a103fbaf-31b0-4b65-916f-ab29d279bec7" actual="#[error.errorType.identifier]" expected='#["ANY"]' />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-product-prc-api-impl-triggerMethodNotAllowSuccess" doc:id="a9e0bf6b-87f6-4e54-866d-a6f05f58838e" expectedErrorType="APIKIT:METHOD_NOT_ALLOWED">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:METHOD_NOT_ALLOWED" doc:id="42729613-f9cb-43a5-8461-a4400c2691fc" processor="apikit:router">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="fakestore-product-papi-config" attributeName="config-ref" />
					</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="APIKIT:METHOD_NOT_ALLOWED" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-product-papi-main" doc:id="0fe4417a-7c8a-45cb-a6f5-1f5cdde67422" name="fakestore-product-papi-main" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="006b2ad2-0c57-4efc-9961-7bc16706053b" actual="#[vars.httpStatus]" expected="#[405]" />
			</munit:validation>
		</munit:test>

</mule>
